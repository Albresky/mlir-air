[tool.cibuildwheel]
environment = { PIP_NO_BUILD_ISOLATION = "false" }
build-verbosity = 3
build = "cp310-* cp311-*"

[tool.cibuildwheel.linux]
skip = ["*-manylinux_i686", "*-musllinux*"]
environment-pass = [
    "CIBW_ARCHS",
    "CMAKE_GENERATOR",
    "CMAKE_ARGS",
    "HOST_CCACHE_DIR",
    "MLIR_WHEEL_VERSION",
    "MLIR_AIE_WHEEL_VERSION",
    "MLIR_AIR_WHEEL_VERSION",
    "PIP_FIND_LINKS",
    "PIP_NO_BUILD_ISOLATION",
]
before-all = [
    "{project}/scripts/docker_prepare_ccache.sh",
]
before-build = [
    "pip install -r requirements.txt",
    "{project}/scripts/pip_install_mlir.sh",
    "{project}/scripts/pip_install_mlir_aie.sh",
    "{project}/scripts/pip_install_mlir_air.sh",
]
repair-wheel-command = [
    'auditwheel repair -w {dest_dir} {wheel}'
]

[tool.cibuildwheel.macos]
before-build = [
    "pip install -r requirements.txt",
    "{project}/scripts/pip_install_mlir.sh",
    "{project}/scripts/pip_install_mlir_aie.sh",
    "{project}/scripts/pip_install_mlir_air.sh",
]
repair-wheel-command = [
    "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
]

[tool.cibuildwheel.windows]
before-build = [
    "pip install delvewheel",
    "pip install -r requirements.txt",
    "bash {project}\\scripts\\pip_install_mlir.sh",
    "bash {project}\\scripts\\pip_install_mlir_aie.sh",
    "bash {project}\\scripts\\pip_install_mlir_air.sh",
]
#repair-wheel-command = 'delvewheel repair -v -w {dest_dir} {wheel} --no-dll mlirpythoncapi.dll'
